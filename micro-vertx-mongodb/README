# Aplicación de prueba realizada con Vert.x y MongoDB

## Manejo asincronico de datos
Una de las características esenciales de la aplicaciones reactivas es la manipulación asincrónica de datos.
Vert.x es asincrónico por lo cual no podemos bloquear/esperar el resultado de una operación, pero si se puede ser notificado cuando esta finalice.
La notificación, gracias a vert.x, ocurre en el mismo thread (event loop).
Por ello el código va a invocar al cliente MongoDB y pasandole un callback que será invocado cuando el resultado este disponible.
La invocación al cliente MongoDB es no bloqueante y devuelve el resultado inmediatamente.
Este modelo no requiere de sincronización, el manejo es por un solo single thread por ello no es necesaria la misma.


* Requiere Maven y Java 8 instalado y configurado.
* Se desarrollo un Verticle que extiende de AbstractVerticle.
* Implementa el método start() recibiendo un Future como parámetro.
    * Al extender de AbstractVerticle tiene acceso a la propiedad vertx
    * Crea un server y hace un listen (puerto 8080)
    * Por medio del Handler llama un lambda devolviendo un resultado por cada request
    * No se implementa el método close()
* Se agrego JUnit y Vertx-unit para realizar la prueba de test del servicio
    * mvn clean test
* Se utilizó maven-shade-plugin para hacer un 'fat jar' con todas las dependencias necesarias (https://maven.apache.org/plugins/maven-shade-plugin/)
    * `mvn clean package`
    * `java -jar target\primer-vertx-1.0-SNAPSHOT-fat.jar`
* Utilizo config() como medio para poder configurar el puerto de escucha de la aplicación
    * Modifico el test para que el puerto sea random
    * Se incluye archivo de configuración `mi-aplicacion-config.json`
    * Luego de empaquetar la aplicación con `mvn package` ejecutar:
        * `java -jar target\primer-vertx-1.0-SNAPSHOT-fat.jar -conf src\main\conf\mi-aplicacion-config.json`
        * Abrir en el browser http://localhost:8082

* Se agrega la extensión Vert.x Web hace mas extensible el manejo HTTP
    * Se creó el objeto Router, el encargado de enviar las solicitudes HTTP al controlador correspondiente.
    * Routes, definir cómo se envian las rutas.
    * Handler, acción de procesar las solicitudes y escribir el resultado.

* Se crea una entrada nueva en el router para poder devolver contenido estático.

* Se creo un CRUD para un objeto de dominio llamado 'instrumento'.

* Se agregaron los routes con sus correspondientes handlers.

* Se realiza las pruebas unitarias del CRUD REST.

* Plan de Test:
    * reservar un puerto, generar configuración de aplicación, iniciar aplicación, ejecutar tests de integración, finalizar aplicación.
    * Manejo de configuración para plan de ejecución con Maven
    * Configurado apache-antrun para iniciar y detener la aplicación
    * Se utiliza maven-failsafe-plugin para ejecutar integration-test `mvn clean verify`
    * AssertJ para fluent assertions
    * Rest-Assured es un framework para testear REST API
    * Agrego un profile para Windows para ejecutar los test de integración

* Utilizar MongoDB como medio de persistencia:
    * Para los test se utiliza un instancia de MongoDB Server.
    * Para los test de integración se utiliza un plugin de maven 'embedmongo-maven-plugin'

